apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.name }}
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Chart.AppVersion }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
      serviceAccountName: {{ .Values.serviceAccountName }}
      containers:
        - name: {{ .Values.name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: {{ .Values.containerPort }}
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "256Mi"
              cpu: "500m"

          # Важно: монтируем ConfigMap как файл application.yaml в /config
          volumeMounts:
            - name: app-storage
              mountPath: /data
            - name: config-volume
              mountPath: /config    # всю директорию /config делаем
              readOnly: true        # обычно ConfigMap монтируют readOnly

          # Переменные окружения
          env:
            # профиль (если нужен), берем из values:
            - name: SPRING_PROFILES_ACTIVE
              value: {{ .Values.springProfilesActive }}

            # Указываем Spring, что нужно читать файл application.yaml из /config
            - name: SPRING_CONFIG_LOCATION
              value: "classpath:/,file:/config/application.yaml"

          # Пример: Можно оставить envFrom глобальных ConfigMap/Secret, если нужно
          envFrom:
            - configMapRef:
                name: {{ .Values.globalConfigMap }}

          # Пробы
          livenessProbe:
            httpGet:
              path: {{ .Values.liveness.path }}
              port: {{ .Values.liveness.port }}
            initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.liveness.periodSeconds }}

          readinessProbe:
            httpGet:
              path: {{ .Values.readiness.path }}
              port: {{ .Values.readiness.port }}
            initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.readiness.periodSeconds }}

      volumes:
        - name: app-storage
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-pvc

        # Подключаем ConfigMap
        - name: config-volume
          configMap:
            name: {{ .Release.Name }}-configmap
            # Если хотим, чтобы файл назывался именно application.yaml:
            items:
              - key: application.yaml
                path: application.yaml
