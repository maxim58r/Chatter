apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.name }}
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Chart.AppVersion }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
      annotations:
{{/*        redeploy: {{ .Values.deployment.annotations.redeploy }}*/}}
        config-checksum: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        secret-checksum: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
    spec:
      serviceAccountName: {{ .Values.serviceAccountName }}
      containers:
        - name: {{ .Values.name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: {{ .Values.containerPort }}
          resources:
            requests:
              memory: {{ .Values.container.resources.requests.memory }}
              cpu: {{ .Values.container.resources.requests.cpu }}
            limits:
              memory: {{ .Values.container.resources.limits.memory }}
              cpu: {{ .Values.container.resources.requests.cpu }}

          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "{{ .Values.springProfilesActive }}"
            - name: SPRING_CONFIG_LOCATION
              value: {{ .Values.spring.classpath | quote }}

            - name: IFT_DATASOURCE_URL
              value: "jdbc:postgresql://{{ .Values.spring.datasource.host }}:{{ .Values.spring.datasource.port }}/{{ .Values.spring.datasource.dbName }}"

            - name: IFT_DATASOURCE_USERNAME
              value: {{ .Values.spring.datasource.username | quote }}

            - name: IFT_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: datasourcePassword

            - name: IFT_REDIS_HOST
              value: {{ .Values.redis.host | quote }}

            - name: IFT_REDIS_PORT
              value: {{ .Values.redis.port | quote }}

            - name: IFT_REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: redisPassword

          envFrom:
            - configMapRef:
                name: {{ .Values.globalConfigMap }}


          volumeMounts:
            - name: app-storage
              mountPath: /data
            - name: config-volume
              mountPath: /config
              readOnly: true

          livenessProbe:
            httpGet:
              path: {{ .Values.liveness.path }}
              port: {{ .Values.liveness.port }}
            initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.liveness.periodSeconds }}
            failureThreshold: {{ .Values.liveness.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readiness.path }}
              port: {{ .Values.readiness.port }}
            initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.readiness.periodSeconds }}
            failureThreshold: {{ .Values.liveness.failureThreshold }}

      volumes:
        - name: app-storage
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-pvc
        - name: config-volume
          configMap:
            name: {{ .Release.Name }}-configmap
            items:
              - key: application.yaml
                path: application.yaml
