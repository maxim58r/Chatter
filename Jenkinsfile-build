pipeline {
	agent { label 'chatter' }

    parameters {
		string(name: 'BRANCH_NAME', defaultValue: 'develop', description: 'Название ветки для сборки')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Пропустить этап тестирования')
    }

    environment {
		DOCKER_HUB_CREDS = credentials('docker_hub')
        GITHUB_CRED = credentials('github_ssh_key')
        SERVICES = "authservice chatservice messagingservice notificationservice"
        DOCKER_BUILDKIT = '1'
        DOCKER_CLIENT_TIMEOUT = '600'  // Увеличение клиентского таймаута до 10 минут
        COMPOSE_HTTP_TIMEOUT = '600'  // Таймаут для Docker Compose
    }

    stages {

		stage('Checkout') {
			steps {
				script {
					echo "Checking out branch ${params.BRANCH_NAME}..."
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${params.BRANCH_NAME}"]],
                        userRemoteConfigs: [[
                            url: 'git@github.com:maxim58r/Chatter.git',
                            credentialsId: 'github_ssh_key'
                        ]],
                        extensions: [
                            [$class: 'SubmoduleOption', recursiveSubmodules: true, trackingSubmodules: true]
                        ]
                    ])
                }
            }
        }

        stage('Setup Environment') {
			steps {
				sh """
                  echo "=== Setup Environment ==="
                  set -e
                  java -version
                  mvn --version
                  docker --version
                """
            }
        }

        stage('Build & Test') {
			when {
				expression { !params.SKIP_TESTS }
            }
            steps {
				sh """
                  echo "=== Build & Test with Maven ==="
                  mvn clean package
                """
            }
        }

        stage('Login to Docker Hub') {
			steps {
				withCredentials([usernamePassword(credentialsId: 'docker_hub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
					sh '''
                      echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin --timeout=600
                    '''
                }
            }
        }

        stage('Prepare Buildx') {
			steps {
				sh """
                  docker buildx create --name mybuilder --driver docker-container --use || true
                  docker buildx inspect mybuilder --bootstrap --timeout=600 || exit 1
                """
            }
        }

        stage('Build & Push Docker Images') {
			steps {
				script {
					try {
						env.SERVICES.split().each { service ->
                            echo "=== Building Docker image for ${service} ==="
                            sh """
                              docker buildx build \
                                  --platform linux/amd64,linux/arm64 \
                                  --build-arg BUILDKIT_STEP_LOG_MAX_SIZE=104857600 \
                                  --build-arg BUILDKIT_STEP_LOG_MAX_RETRIES=10 \
                                  -t ${DOCKER_HUB_CREDS_USR}/${service}:${env.BUILD_NUMBER} \
                                  -t ${DOCKER_HUB_CREDS_USR}/${service}:latest \
                                  --push ./services/${service} --timeout=600
                            """
                        }
                    } catch (Exception e) {
						echo "Error building one of the services: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error("Build failed for service: ${service}")
                    }
                }
            }
        }
    }

    post {
		success {
			echo "✅ Build successful!"
            script {
				writeFile file: 'successful-build-id.txt', text: "${env.BUILD_NUMBER}"
                archiveArtifacts artifacts: 'successful-build-id.txt', fingerprint: true
            }
        }
        failure {
			echo "❌ Build failed!"
            script {
				archiveArtifacts artifacts: '**/target/*.log', allowEmptyArchive: true
                sh 'docker logs $(docker ps -lq) || true'
            }
        }
        cleanup {
			sh """
              echo "=== Cleanup ==="
              docker logout
              if docker buildx ls | grep -q mybuilder; then
                  echo "Removing Docker Buildx builder 'mybuilder'..."
                  docker buildx rm mybuilder
              else
                  echo "No builder 'mybuilder' found, skipping removal."
              fi
            """
        }
    }
}
