pipeline {
	agent { label 'chatter' }

    parameters {
		booleanParam(name: 'DEPLOY_TO_KUBERNETES', defaultValue: true, description: 'Выполнять деплой на Kubernetes')
        booleanParam(name: 'RUN_HEALTH_CHECK', defaultValue: true, description: 'Выполнять проверку состояния сервисов')
        string(name: 'IMAGE_TAG', defaultValue: 'latest', description: 'Тег Docker-образов для деплоя')
        string(name: 'BUILD_ID', defaultValue: '', description: 'ID успешной сборки для деплоя')
    }

    environment {
		DOCKER_HUB_CREDS = credentials('docker_hub')
        KUBECONFIG = "/var/lib/jenkins/.kube/config"
        SERVICES = "authservice chatservice messagingservice notificationservice"
    }

    stages {

		stage('Fetch Build Info') {
			steps {
				script {
					if (params.BUILD_ID) {
						// Если BUILD_ID указан, читаем файл с билдом и устанавливаем IMAGE_TAG
						copyArtifacts(
							projectName: 'chatter-multimodule-build-pipeline',
							selector: [
								$class: 'SpecificBuildSelector',
								buildNumber: params.BUILD_ID
							],
							filter: 'successful-build-id.txt'
						)
						def buildId = readFile('successful-build-id.txt').trim()
						echo "Using Build ID: ${buildId}"
						env.IMAGE_TAG = buildId
					} else {
						// Если BUILD_ID не указан, оставляем пользовательский IMAGE_TAG
						echo "Using user-provided IMAGE_TAG: ${params.IMAGE_TAG}"
						env.IMAGE_TAG = params.IMAGE_TAG
					}
				}
			}
		}


        stage('Apply ConfigMap') {
			steps {
				script {
					echo "Applying global ConfigMap..."
                    sh 'kubectl apply -f k8s/configmap/global-configmap.yaml'
                }
            }
        }

        stage('Deploy to Kubernetes with Helm') {
			when {
				expression { params.DEPLOY_TO_KUBERNETES }
            }
            steps {
				script {
					echo "Deploying build ID: ${params.BUILD_ID}, image tag: ${env.IMAGE_TAG}"
                    env.SERVICES.split().each { service ->
                        echo "=== Deploying ${service} with image tag ${env.IMAGE_TAG} ==="
                        sh """
                          helm upgrade --install ${service} ./k8s/${service}/helm \\
                          	  --atomic --timeout 180s \\
                              --set image.repository=${DOCKER_HUB_CREDS_USR}/${service} \\
                              --set image.tag=${env.IMAGE_TAG} \\
                              --set deployment.annotations.redeploy=\$(date +%s)
                        """
                    }
                }
            }
        }

        stage('Health Check') {
			when {
				expression { params.RUN_HEALTH_CHECK }
            }
            steps {
				script {
					env.SERVICES.split().each { service ->
                        echo "=== Waiting for ${service} Deployment to be ready ==="
                        sh """
                          kubectl rollout status deployment/${service} --namespace=default --timeout=180s
                        """
                        echo "=== Performing Health Check for ${service} ==="
                        sh """
                          curl --fail --max-time 10 http://${service}.local/actuator/health || {
                            echo "Health check failed for ${service}";
                            exit 1;
                          }
                        """
                    }
                }
            }
        }
    }

    post {
		success {
			echo "✅ Deployment successful!"
        }
        failure {
			echo "❌ Deployment failed!"
        }
    }
}
